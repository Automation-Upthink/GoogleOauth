package oauth;import com.google.auth.Credentials;import com.google.auth.oauth2.UserCredentials;import java.io.InputStream;import java.nio.file.Files;import java.nio.file.Path;import java.util.Map;import com.fasterxml.jackson.databind.ObjectMapper;public class FileTokenStorage implements TokenStorage{    private final Path tokenFilePath;    private final ObjectMapper mapper = new ObjectMapper();    public FileTokenStorage(Path tokenFilePath) {        this.tokenFilePath = tokenFilePath;    }    @Override    public Credentials load() throws StorageException {        if ( !Files.exists(tokenFilePath) ) return null;        try {            InputStream in = Files.newInputStream(tokenFilePath);            return UserCredentials.fromStream(in);        } catch (Exception e) {            throw new StorageException("Failed to load the token file", e);        }    }    @Override    public void save(Credentials credentials) throws StorageException {        try {            UserCredentials userCredentials = (UserCredentials) credentials;            Map<String, Object> map = Map.of(                    "type",     "authorised_user",                    "client_id",     userCredentials.getClientId(),                    "client_secret", userCredentials.getClientSecret(),                    "refresh_token", userCredentials.getRefreshToken(),                    "access_token",  userCredentials.getAccessToken().getTokenValue(),                    "expiry",        userCredentials.getAccessToken().getExpirationTime()                                                                        .toInstant().toString()            );            mapper.writeValue(tokenFilePath.toFile(), map);        } catch (Exception e) {            throw new StorageException("Failed to save the token file", e);        }    }}