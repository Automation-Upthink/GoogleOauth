package oauth;import com.google.auth.Credentials;import software.amazon.awssdk.regions.Region;import java.io.IOException;import java.nio.file.Path;import java.security.GeneralSecurityException;import java.util.List;/** * Factory for creating Authenticator instances based on client config and token storage. */public final class AuthenticatorFactory {    private AuthenticatorFactory() {        // prevent instantiation    }    /**     * General factory method.     *     * @param clientConfigType  "env" or "file"     * @param clientParam       env var name or file path for OAuth client JSON     * @param storageType       "env", "file", or "aws"     * @param storageParam      env var name, file path, or AWS secret name     * @param awsRegion         AWS region (required if storageType is "aws")     * @param githubActions     flag to enable GitHub Actions lookup (only for env storage)     * @param scopes            OAuth scopes     * @return configured Authenticator     */    public static Authenticator create(            String clientConfigType,            String clientParam,            String storageType,            String storageParam,            Region awsRegion,            boolean githubActions,            List<String> scopes    ) throws AuthException, ConfigException, IOException, StorageException, GeneralSecurityException {        // 1. ClientConfigProvider        ClientConfigProvider clientConfig;        switch (clientConfigType.toLowerCase()) {            case "env":                clientConfig = new EnvClientConfig(clientParam);                break;            case "file":                clientConfig = new FileClientConfig(Path.of(clientParam));                break;            default:                throw new IllegalArgumentException("Unknown clientConfigType: " + clientConfigType);        }        // 2. TokenStorage        TokenStorage tokenStorage;        switch (storageType.toLowerCase()) {            case "env":                tokenStorage = TokenStorageFactory.createEnvStorage(storageParam, githubActions);                break;            case "file":                tokenStorage = TokenStorageFactory.createFileStorage(Path.of(storageParam));                break;            case "aws":                if (awsRegion == null) {                    throw new IllegalArgumentException("AWS region must be provided for AWS storage");                }                tokenStorage = TokenStorageFactory.createAwsStorage(storageParam, awsRegion);                break;            default:                throw new IllegalArgumentException("Unknown storageType: " + storageType);        }        // 3. Build the authenticator        return new OauthEnvAuthenticator(clientConfig, tokenStorage, scopes);    }    /**     * Env-based auth with GitHub Actions lookup enabled.     */    public static Authenticator createEnvAuthenticatorWithGitHubActions(            String clientEnvVar,            String tokenEnvVar,            List<String> scopes    ) throws AuthException, ConfigException, IOException, StorageException, GeneralSecurityException {        return create(                "env",                clientEnvVar,                "env",                tokenEnvVar,                null,                true,                scopes        );    }    /**     * Env-based auth without GitHub Actions lookup.     */    public static Authenticator createEnvAuthenticatorWithoutGitHubActions(            String clientEnvVar,            String tokenEnvVar,            List<String> scopes    ) throws AuthException, ConfigException, IOException, StorageException, GeneralSecurityException {        return create(                "env",                clientEnvVar,                "env",                tokenEnvVar,                null,                false,                scopes        );    }    /**     * Convenience for file-based auth.     */    public static Authenticator createFileAuthenticator(            Path clientConfigPath,            Path tokenFilePath,            List<String> scopes    ) throws AuthException, ConfigException, IOException, StorageException, GeneralSecurityException {        return create(                "file",                clientConfigPath.toString(),                "file",                tokenFilePath.toString(),                null,                false,                scopes        );    }    /**     * Convenience for AWS-based auth.     */    public static Authenticator createAwsAuthenticator(            String clientEnvVar,            String awsSecretName,            Region region,            List<String> scopes    ) throws AuthException, ConfigException, IOException, StorageException, GeneralSecurityException {        return create(                "env",                clientEnvVar,                "aws",                awsSecretName,                region,                false,                scopes        );    }}