package oauth;import com.fasterxml.jackson.databind.ObjectMapper;import com.google.api.client.json.Json;import com.google.auth.Credentials;import com.google.auth.oauth2.AccessToken;import com.google.auth.oauth2.GoogleAuthUtils;import com.google.auth.oauth2.GoogleCredentials;import com.google.auth.oauth2.UserCredentials;import java.io.ByteArrayInputStream;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.nio.charset.StandardCharsets;import java.nio.file.Files;import java.nio.file.Path;import java.nio.file.Paths;import java.util.ArrayList;import java.util.List;import java.util.Map;import java.nio.file.StandardOpenOption;import io.github.cdimascio.dotenv.Dotenv;public class EnvTokenStorage implements TokenStorage{    private final Dotenv dotenv = Dotenv.configure().ignoreIfMissing().load();    private final String envVar;    private final boolean githubActions;    private final ObjectMapper mapper = new ObjectMapper();    public EnvTokenStorage(String envVar, boolean githubActions) {        this.envVar = envVar;        this.githubActions = githubActions;    }    @Override    public Credentials load() throws StorageException {        String json = System.getenv(envVar);        if (json == null) {            json = dotenv.get(envVar);        }        if ( json == null ) return null;        try {            InputStream byteArrayInputStream = new ByteArrayInputStream(json.getBytes(StandardCharsets.UTF_8));            return UserCredentials.fromStream(byteArrayInputStream);        } catch (Exception e) {            throw new StorageException("Failed to parse token JSON from env var", e);        }    }    @Override    public void save(Credentials credentials) throws StorageException {        try {            UserCredentials userCredentials = (UserCredentials) credentials;            Map<String, Object> data = Map.of(                    "type",      "authorized_user",                    "client_id",     userCredentials.getClientId(),                    "client_secret", userCredentials.getClientSecret(),                    "refresh_token", userCredentials.getRefreshToken(),                    "access_token",  userCredentials.getAccessToken().getTokenValue(),                    "expiry",        userCredentials.getAccessToken().getExpirationTime(),                    "scopes",        userCredentials.getAccessToken().getScopes()            );            String serialized = mapper.writeValueAsString(data);            if (githubActions) {                String githubEnv = System.getenv("GITHUB_ENV");                Files.writeString(                        Path.of(githubEnv),                        envVar + "=" + serialized + "\n",                        StandardOpenOption.APPEND,                        StandardOpenOption.CREATE                );            } else {                Path envPath = Paths.get(".env");                List<String> lines = Files.exists(envPath)                        ? Files.readAllLines(envPath, StandardCharsets.UTF_8)                        : new ArrayList<>();                String newLine = envVar + "=" + serialized;                boolean replaced = false;                for (int i = 0; i < lines.size(); i++) {                    if (lines.get(i).startsWith(envVar + "=")) {                        lines.set(i, newLine);                        replaced = true;                        break;                    }                }                if (!replaced) {                    lines.add(newLine);                }                Files.write(envPath, lines, StandardCharsets.UTF_8,                        StandardOpenOption.TRUNCATE_EXISTING,                        StandardOpenOption.CREATE);            }            // Update in‐process env for this run:            System.setProperty(envVar, serialized);        } catch (Exception e) {            throw new StorageException("Failed to save token to env var", e);        }    }}