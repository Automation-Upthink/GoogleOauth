package oauth;import com.google.api.client.auth.oauth2.Credential;import com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp;import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;import com.google.api.client.http.javanet.NetHttpTransport;import com.google.api.client.json.gson.GsonFactory;import com.google.auth.Credentials;import com.google.auth.oauth2.AccessToken;import com.google.auth.oauth2.UserCredentials;import java.io.IOException;import java.io.InputStreamReader;import java.io.ByteArrayInputStream;import java.nio.charset.StandardCharsets;import java.time.Instant;import java.util.Date;import java.util.List;public class OauthEnvAuthenticator implements  Authenticator{    private final static int REFRESH_BUFFER_SECONDS = 60;    private final TokenStorage envTokenStorage;    private final List<String> scopes;    private final ClientConfigProvider oauth2ClientIdEnvPath;    public OauthEnvAuthenticator(ClientConfigProvider oauth2ClientIdEnvPath,                                  TokenStorage envTokenStorage,                                  List<String> scopes) {        this.oauth2ClientIdEnvPath = oauth2ClientIdEnvPath;        this.envTokenStorage = envTokenStorage;        this.scopes = scopes;    }    @Override    public Credentials authenticate() throws AuthException, StorageException, IOException, ConfigException {        try {            // 1) try to check if we can authenticate from the token file            Credentials existingCredentials = envTokenStorage.load(); // This returns user credentials            if (existingCredentials instanceof UserCredentials) {                UserCredentials userCredentials = (UserCredentials) ((UserCredentials) existingCredentials).createScoped(scopes);                return refreshAccessTokenIfNeeded(userCredentials);            }            // 2) Try new OAuth flow            String json = oauth2ClientIdEnvPath.loadClientJson();            try {                // Read the file                InputStreamReader inputStreamReader = new InputStreamReader(                        new ByteArrayInputStream(json.getBytes(StandardCharsets.UTF_8)),                        StandardCharsets.UTF_8                );                // Load the client secrets using GoogleClientSecrets library                GoogleClientSecrets googleClientSecrets = GoogleClientSecrets.load(                        GsonFactory.getDefaultInstance(), inputStreamReader                );                // Create a new Google authorization code flow using google secrets                GoogleAuthorizationCodeFlow googleAuthorizationCodeFlow = new GoogleAuthorizationCodeFlow.Builder(                        new NetHttpTransport(),                        GsonFactory.getDefaultInstance(),                        googleClientSecrets,                        scopes                ).setAccessType("offline").build();                LocalServerReceiver receiver = new LocalServerReceiver.Builder().setPort(0).build();                // Get the new elements of token.json                Credential newCredentials = new AuthorizationCodeInstalledApp(googleAuthorizationCodeFlow, receiver).authorize("user");                // Set the new credentials to save in token file                UserCredentials userCredentials = UserCredentials.newBuilder()                        .setClientId(googleClientSecrets.getDetails().getClientId())                        .setClientSecret(googleClientSecrets.getDetails().getClientSecret())                        .setRefreshToken(newCredentials.getRefreshToken())                        .setAccessToken(new AccessToken(newCredentials.getAccessToken(), new Date(newCredentials.getExpirationTimeMilliseconds())))                        .build();                envTokenStorage.save(userCredentials);                return userCredentials;            } catch (Exception e) {                throw new ConfigException("Failed to get the credentials from oauth2 file or failed to validate the credentials", e);            }        } catch (Exception e) {            throw new AuthException("OAuthFileAuthenticator failed", e);        }    }    private UserCredentials refreshAccessTokenIfNeeded(UserCredentials creds) throws AuthException, StorageException, IOException {        creds.refreshIfExpired();        AccessToken accessToken = creds.getAccessToken();        Instant expiry = (accessToken != null && accessToken.getExpirationTime() != null)                ? accessToken.getExpirationTime().toInstant() : Instant.EPOCH;        Instant threshold = Instant.now().plusSeconds(REFRESH_BUFFER_SECONDS);        // If expiry is after the threshold time limit, credentials are valid        if (expiry.isAfter(threshold)) {            return creds;        }        // Token has already expired or about to expire (within threshold time limit)        try{//            UserCredentials refreshed = UserCredentials.newBuilder()//                    .setClientId(creds.getClientId())//                    .setClientSecret(creds.getClientSecret())//                    .setRefreshToken(creds.getRefreshToken())//                    .build();////            return refreshed;            creds.refresh();            envTokenStorage.save(creds);            return creds;        } catch (Exception e) {            throw new AuthException("Failed to refresh access token", e);        }    }}