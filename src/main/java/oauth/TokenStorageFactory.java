package oauth;import software.amazon.awssdk.regions.Region;import java.nio.file.Path;public final class TokenStorageFactory {    private TokenStorageFactory(){}    /**     * Create TokenStorage based on type with optional parameters.     *     * @param type             "env", "file" or "aws"     * @param envVar           name of the environment variable     * @param githubActions    flag to enable GitHub Actions lookup     * @param filePath         path to the token file     * @param awsSecretName    name of the AWS Secrets Manager secret     * @param awsRegion        AWS region for Secrets Manager     * @return configured TokenStorage instance     * @throws IllegalArgumentException if type is unrecognized     */    public static TokenStorage create(String type,                                      String envVar,                                      boolean githubActions,                                      Path filePath,                                      String awsSecretName,                                      Region awsRegion) {        switch (type.toLowerCase()) {            case "env":                String resolvedEnv = envVar != null ? envVar : "GOOGLE_OAUTH_TOKEN";                return new EnvTokenStorage(resolvedEnv, githubActions);            case "file":                Path resolvedPath = filePath != null                        ? filePath : Path.of(System.getProperty("user.home"), ".oauth_tokens.json");                return new FileTokenStorage(resolvedPath);            case "aws":                String resolvedSecret = awsSecretName != null                        ? awsSecretName : System.getenv("AWS_OAUTH_SECRET_NAME");                Region region = awsRegion != null                        ? awsRegion :  (System.getenv("AWS_REGION") != null                            ? Region.of(System.getenv("AWS_REGION")) : Region.AP_SOUTH_1);                return new AWSTokenStorage(resolvedSecret, region);            default:                throw new IllegalArgumentException("Unknown storage type: " + type);        }    }    /** Convenience methods **/    public static TokenStorage createEnvStorage() {        return create("env", null, false, null, null, null);    }    public static TokenStorage createFileStorage() {        return create("file", null, false, null, null, null);    }    public static TokenStorage createEnvStorage(String envVar, boolean githubActions) {        return create("env", envVar, githubActions, null, null, null);    }    public static TokenStorage createFileStorage(Path filePath) {        return create("file", null, false, filePath, null, null);    }    public static TokenStorage createAwsStorage(String secretName, Region region) {        return create("aws", null, false, null, secretName, region);    }}