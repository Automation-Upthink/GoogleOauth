package oauth;import com.fasterxml.jackson.databind.ObjectMapper;import com.google.auth.Credentials;import com.google.auth.oauth2.GoogleCredentials;import com.google.auth.oauth2.UserCredentials;import software.amazon.awssdk.regions.Region;import software.amazon.awssdk.services.secretsmanager.SecretsManagerClient;import software.amazon.awssdk.services.secretsmanager.model.*;import java.io.ByteArrayInputStream;import java.io.IOException;import java.nio.charset.StandardCharsets;public class AWSTokenStorage implements TokenStorage {    private final String secretName;    private final SecretsManagerClient client;    private final ObjectMapper mapper = new ObjectMapper();    public AWSTokenStorage(String secretName, Region region) {        if (secretName == null || secretName.isEmpty()) {            throw new IllegalArgumentException("AWS secret name must not be null or empty");        }        if (region == null) {            throw new IllegalArgumentException("AWS region must not be null");        }        this.secretName = secretName;        this.client = SecretsManagerClient.builder()                .region(region)                .build();    }    @Override    public Credentials load() throws StorageException {        try {            GetSecretValueRequest request = GetSecretValueRequest.builder()                    .secretId(secretName)                    .build();            GetSecretValueResponse response = client.getSecretValue(request);            String secretString = response.secretString();            if (secretString == null || secretString.isEmpty()) {                throw new StorageException("Secret " + secretName + " is empty");            }            ByteArrayInputStream stream = new ByteArrayInputStream(secretString.getBytes(StandardCharsets.UTF_8));            return GoogleCredentials.fromStream(stream);        } catch (IOException e) {            throw new RuntimeException(e);        }    }    @Override    public void save(Credentials credentials) throws StorageException {        if (credentials == null) {            throw new IllegalArgumentException("Credentials must not be null");        }        try {            String json = mapper.writeValueAsString(credentials);            UpdateSecretRequest request = UpdateSecretRequest.builder()                    .secretId(secretName)                    .secretString(json)                    .build();            UpdateSecretResponse response = client.updateSecret(request);        } catch (SecretsManagerException e) {            throw new StorageException(                    "Failed to update AWS secret " + secretName + ": " + e.awsErrorDetails().errorMessage(),                    e            );        } catch (Exception e) {            throw new StorageException("Failed to serialize credentials to JSON", e);        }    }}